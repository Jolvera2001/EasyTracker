@page "/"
@inject IJSRuntime JsRuntime
@using data
@using EasyTracker.Components

<main>
    <h1 class="text-2xl font-bold mb-4">Expenses</h1>
    
    <button
        @onclick="() => showAddDialog = true"
        class="mb-4 bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700">
        Add Expense
    </button>
    
    <ExpenseGrid ExpenseList="@Expenses"/>

    <AddExpenseDialog
        IsVisible="@showAddDialog"
        OnSave="HandleSaveExpense"
        OnClose="() => showAddDialog = false" />
    
    <div class="bg-white p-6 rounded-lg shadow-lg">
        <h2 class="text-xl font-semibold mb-4">Expense Trends</h2>
        <Chart Config="_config1" @ref="_chart1"></Chart>
    </div>
</main>

@code
{
    private LineChartConfig? _config1;
    private Chart? _chart1;
    private List<Expense> Expenses { get; set; } = new();
    private bool showAddDialog;

    private async Task HandleSaveExpense(Expense expense)
    {
        Expenses.Add(expense);
        showAddDialog = false;
    }

    protected override async Task OnInitializedAsync()
    {
        _config1 = new LineChartConfig()
            {
                Options = new Options
                {
                    Responsive = true,
                    MaintainAspectRatio = false,
                    Plugins = new Plugins
                    {
                        Title = new Title 
                        { 
                            Display = true,
                            Text = "Expenses Overview"
                        }
                    }
                }
            };
        _config1.Data.Labels = Expenses.Select(e => e.Name).ToList();
        
        // Add dataset for expenses
        _config1.Data.Datasets.Add(new LineDataset
        {
            Label = "Expense Amounts",
            Data = Expenses.Select(e => (decimal?)e.Amount).ToList(),
            BorderColor = "#3B82F6", // Tailwind blue-500
            BackgroundColor = "rgba(59, 130, 246, 0.1)", // Transparent blue
            Fill = true
        });

        // If you're using the monthly/non-monthly split:
        var monthlyExpenses = new LineDataset
        {
            Label = "Monthly Expenses",
            Data = Expenses.Where(e => e.Monthly)
                            .Select(e => (decimal?)e.Amount)  // Convert to decimal?
                            .ToList(),
            BorderColor = "#10B981",
            BackgroundColor = "rgba(16, 185, 129, 0.1)",
            Fill = true
        };
        var nonMonthlyExpenses = new LineDataset
        {
            Label = "One-time Expenses",
            Data = Expenses.Where(e => !e.Monthly)
                            .Select(e => (decimal?)e.Amount)  // Convert to decimal?
                            .ToList(),
            BorderColor = "#EF4444",
            BackgroundColor = "rgba(239, 68, 68, 0.1)",
            Fill = true
        };
    }

    @* private async Task GreetAsync()
    {
        GreetMsg = await JsRuntime.InvokeAsync<string>("__TAURI__.core.invoke", "greet", new { name = GreetInput });
    } *@
    @* this is a good example of how to invoke rust commands *@
}
