@page "/"
@inject IJSRuntime JsRuntime
@using data

<main>
    <div class="bg-white shadow rounded-lg p-6">
        <table class="w-full">
            <thead>
                <tr>
                    <th class="text-left pb-3">Name</th>
                    <th class="text-left pb-3">Amount</th>
                    <th class="text-left pb-3">Monthly</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in expenseList)
                {
                    <tr class="border-t hover:bg-gray-50">
                        <td class="py-2">@item.Name</td>
                        <td class="py-2">@item.Amount.ToString("F2")</td>
                        <td class="py-2">
                            @if (item.Monthly)
                            {
                                <span class="bg-green-100 text-green-800 px-2 py-1 rounded-full text-sm">
                                    yes
                                </span>
                            } 
                            
                            else 
                            {
                                <span class="bg-gray-100 text-gray-800 px-2 py-1 rounded-full text-sm">
                                    No
                                </span>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="bg-white p-6 rounded-lg shadow-lg">
        <h2 class="text-xl font-semibold mb-4">Expense Trends</h2>
        <Chart Config="_config1" @ref="_chart1"></Chart>
    </div>
</main>

@code
{
    private LineChartConfig? _config1;
    private Chart? _chart1;
    private List<Expense> expenseList { get; set; } = new() 
        {
            new Expense 
            {
                Id = Guid.NewGuid(),
                Name = "First Expense",
                Amount = 120.18,
                Monthly = true,
            },
            new Expense 
            {
                Id = Guid.NewGuid(),
                Name = "Second Expense",
                Amount = 20.25,
                Monthly = false,
            },
            new Expense 
            {
                Id = Guid.NewGuid(),
                Name = "Third Expense",
                Amount = 1020.00,
                Monthly = true,
            } 
        };

    protected override async Task OnInitializedAsync()
    {
        _config1 = new LineChartConfig()
            {
                Options = new Options
                {
                    Responsive = true,
                    MaintainAspectRatio = false,
                    Plugins = new Plugins
                    {
                        Title = new Title 
                        { 
                            Display = true,
                            Text = "Expenses Overview"
                        }
                    }
                }
            };
        _config1.Data.Labels = expenseList.Select(e => e.Name).ToList();
        
        // Add dataset for expenses
        _config1.Data.Datasets.Add(new LineDataset
        {
            Label = "Expense Amounts",
            Data = expenseList.Select(e => (decimal?)e.Amount).ToList(),
            BorderColor = "#3B82F6", // Tailwind blue-500
            BackgroundColor = "rgba(59, 130, 246, 0.1)", // Transparent blue
            Fill = true
        });

        // If you're using the monthly/non-monthly split:
        var monthlyExpenses = new LineDataset
        {
            Label = "Monthly Expenses",
            Data = expenseList.Where(e => e.Monthly)
                            .Select(e => (decimal?)e.Amount)  // Convert to decimal?
                            .ToList(),
            BorderColor = "#10B981",
            BackgroundColor = "rgba(16, 185, 129, 0.1)",
            Fill = true
        };
        var nonMonthlyExpenses = new LineDataset
        {
            Label = "One-time Expenses",
            Data = expenseList.Where(e => !e.Monthly)
                            .Select(e => (decimal?)e.Amount)  // Convert to decimal?
                            .ToList(),
            BorderColor = "#EF4444",
            BackgroundColor = "rgba(239, 68, 68, 0.1)",
            Fill = true
        };
    }

    @* private async Task GreetAsync()
    {
        GreetMsg = await JsRuntime.InvokeAsync<string>("__TAURI__.core.invoke", "greet", new { name = GreetInput });
    } *@
    @* this is a good example of how to invoke rust commands *@
}
